make_images.py:                plt.savefig("images/tmp/img{}_{}.png".format(n, i))
make_images.py:                plt.savefig("images/frames/frame{}agent{}".format(int(t_final/float(N_steps) * n/5), i))
make_images.py:                img = image.imread("images/tmp/img{}_{}.png".format(t, i))
make_images.py:        ani.save('images/gifs/agent{}.gif'.format(i), writer='imagemagick', fps=10)
make_scene.py:    folder = '../annotations/coupa/video2/'
make_split_scenes.py:mkdir("scenes/" + fname)
make_split_scenes.py:mkdir("scenes/" + fname + "/scenes")
make_split_scenes.py:mkdir("scenes/" + fname + "/sets")
make_split_scenes.py:mkdir("scenes/" + fname + "/train_sets")
make_split_scenes.py:    with open("scenes/" + fname + "/scenes/{}.pkl".format(j), "w") as f:
make_split_scenes.py:    with open("scenes/" + fname + "/sets/{}.pkl".format(j), "w") as f:
make_split_scenes.py:    with open("scenes/" + fname + "/train_sets/{}.pkl".format(j), "w") as f:
over_time.py:paths_kit = reduce(sm, [["pickles/kitani/{}/{}/".format(x, j) for j in indexes] for x in rng])
over_time.py:paths_ours = reduce(sm, [["pickles/ours/{}/{}/".format(x, j) for j in indexes] for x in rng])
over_time.py:paths_lin = reduce(sm, [["pickles/linear/{}/{}/".format(x, j) for j in indexes] for x in rng])
over_time.py:paths_rand = reduce(sm, [["pickles/rand/{}/{}/".format(x, j) for j in indexes] for x in rng])
over_time.py:plt.savefig('images/The Results.eps', format='eps')
over_time.py:plt.savefig('images/The ROC Results.eps', format='eps')
prepare_folders.py:    mkdir("kitani/{}".format(name))
prepare_folders.py:        mkdir("kitani/{}/{}".format(name, ind))
prepare_folders.py:        mkdir("kitani/{}/{}/output".format(name, ind))
prepare_folders.py:        mkdir("kitani/{}/{}/frames".format(name, ind))
prepare_folders.py:        cp("kitani/{}_feat.xml".format(name), "kitani/{}/{}/walk_feature_maps.xml".format(name, ind))
prepare_folders.py:        cp("kitani/{}_topdown.jpg".format(name), "kitani/{}/{}/walk_birdseye.jpg".format(name, ind))
prepare_folders.py:        cp("kitani/{}_reward.txt".format(name), "kitani/{}/{}/walk_reward_weights.txt".format(name, ind))
process_data.py:    BB_ts_list, width, height = get_BB_ts_list("../annotations/coupa/video2/", label = "Biker")
scene.py:    folder = '../annotations/coupa/video2/'
single_auc.py:    path = "pickles/{}/{}/{}/".format(parad, name, split)
single_auc.py:    plt.savefig("images/AUC_{}_split_{}_{}.png".format(ind[0], ind[1], ind[2]))
single_auc.py:#plt.savefig('images/The Results.eps', format='eps')
speed_up.py:        mkdir("/pickles/ours/{}".format(name))
speed_up.py:        mkdir("/pickles/ours/{}/{}".format(name, ind))
speed_up.py:        mkdir("/pickles/linear/{}".format(name, ind))
speed_up.py:        mkdir("/pickles/linear/{}/{}".format(name, ind))
speed_up.py:        mkdir("/pickles/rand/{}".format(name))
speed_up.py:        mkdir("/pickles/rand/{}/{}".format(name, ind))
speed_up.py:                np.save("pickles/rand/{}/{}/pr_agent_{}_time_{}".format(name,ind, i, n), rand_walk)
speed_up.py:                np.save("pickles/rand/{}/{}/tr_agent_{}_time_{}".format(name, ind, i, n), tr_ours)
speed_up.py:                np.save("pickles/ours/{}/{}/pr_agent_{}_time_{}".format(name, ind, i, n), pr_ours)
speed_up.py:                np.save("pickles/ours/{}/{}/tr_agent_{}_time_{}".format(name, ind, i, n), tr_ours)
speed_up.py:                np.save("pickles/linear/{}/{}/pr_agent_{}_time_{}".format(name, ind,i, n), pr_lin)
speed_up.py:                np.save("pickles/linear/{}/{}/tr_agent_{}_time_{}".format(name, ind, i, n), tr_lin)
speed_up.py:        plt.savefig("images/precision_recall/{}/{}AUC_for_agent_{}.png".format(scene_number, scene_number, i))
spit_figures.py:        mkdir("images/{}/".format(scene_name))
spit_figures.py:        mkdir("images/{}/{}".format(scene_name, labels[0]))
spit_figures.py:        mkdir("images/{}/{}/{}".format(scene_name, labels[0], split_index))
spit_figures.py:        mkdir("images/{}/{}/{}/{}".format(scene_name, labels[0], split_index, agent_num))
spit_figures.py:        print "images/{}/{}/{}/{}/agent_{}_time_{}.eps".format(scene_name, labels[0], split_index, agent_num, agent_num, times[time])
spit_figures.py:        plt.savefig("images/{}/{}/{}/{}/agent_{}_time_{}.eps".format(scene_name, labels[0], split_index, agent_num, agent_num, times[time]), format="eps", bbox_inches="tight")
